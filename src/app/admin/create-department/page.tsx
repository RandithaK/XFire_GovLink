"use client";

import React, { useEffect, useMemo, useState } from "react";
import {
  Building2,
  Users,
  MapPin,
  Phone,
  Mail,
  Save,
  Plus,
  X,
  CheckCircle,
  AlertCircle,
  Edit,
  Trash2,
  Search,
  Filter,
  XCircle,
  Eye,
  EyeOff,
  Hash,
  FileText,
  Globe,
  Clock,
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

// ---------------------------
// Schema-aligned enums/types
// ---------------------------

export enum DepartmentStatus {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  SUSPENDED = "SUSPENDED",
}

export enum DepartmentType {
  MINISTRY = "MINISTRY",
  DEPARTMENT = "DEPARTMENT",
  AGENCY = "AGENCY",
  STATUTORY_BOARD = "STATUTORY_BOARD",
  CORPORATION = "CORPORATION",
}

// Sri Lankan Provinces and Districts (as const for TS type inference)
const SRI_LANKAN_PROVINCES = [
  "Western",
  "Central",
  "Southern",
  "Uva",
  "Sabaragamuwa",
  "North Western",
  "North Central",
  "Northern",
  "Eastern",
] as const;
type Province = typeof SRI_LANKAN_PROVINCES[number];

const SRI_LANKAN_DISTRICTS = [
  // Western
  "Colombo",
  "Gampaha",
  "Kalutara",
  // Central
  "Kandy",
  "Matale",
  "Nuwara Eliya",
  // Southern
  "Galle",
  "Matara",
  "Hambantota",
  // Northern
  "Jaffna",
  "Kilinochchi",
  "Mannar",
  "Vavuniya",
  "Mullaitivu",
  // Eastern
  "Batticaloa",
  "Trincomalee",
  "Ampara",
  // North Western
  "Kurunegala",
  "Puttalam",
  // North Central
  "Anuradhapura",
  "Polonnaruwa",
  // Uva
  "Badulla",
  "Monaragala",
  // Sabaragamuwa
  "Ratnapura",
  "Kegalle",
] as const;
type District = typeof SRI_LANKAN_DISTRICTS[number];

// Optional helper: derive province from district
const DISTRICT_TO_PROVINCE: Record<District, Province> = {
  // Western
  Colombo: "Western",
  Gampaha: "Western",
  Kalutara: "Western",
  // Central
  Kandy: "Central",
  Matale: "Central",
  "Nuwara Eliya": "Central",
  // Southern
  Galle: "Southern",
  Matara: "Southern",
  Hambantota: "Southern",
  // Northern
  Jaffna: "Northern",
  Kilinochchi: "Northern",
  Mannar: "Northern",
  Vavuniya: "Northern",
  Mullaitivu: "Northern",
  // Eastern
  Batticaloa: "Eastern",
  Trincomalee: "Eastern",
  Ampara: "Eastern",
  // North Western
  Kurunegala: "North Western",
  Puttalam: "North Western",
  // North Central
  Anuradhapura: "North Central",
  Polonnaruwa: "North Central",
  // Uva
  Badulla: "Uva",
  Monaragala: "Uva",
  // Sabaragamuwa
  Ratnapura: "Sabaragamuwa",
  Kegalle: "Sabaragamuwa",
};

interface IContact {
  name: string;
  position: string;
  email: string;
  phone: string;
}

interface IAddress {
  addressLine1: string;
  addressLine2?: string;
  city: string;
  district: District;
  province: Province;
  postalCode: string;
}

interface IService {
  id: string;
  name: string;
  description: string;
  category: string;
  isActive: boolean;
  processingTime: string;
  fee?: number;
  requirements: string[];
  createdAt?: string | Date;
  updatedAt?: string | Date;
}

type DaySchedule = { open: string; close: string; isWorkingDay: boolean };
interface WorkingHours {
  monday: DaySchedule;
  tuesday: DaySchedule;
  wednesday: DaySchedule;
  thursday: DaySchedule;
  friday: DaySchedule;
  saturday: DaySchedule;
  sunday: DaySchedule;
}

// Department form data aligned to schema
interface DepartmentFormData {
  _id?: string;
  departmentId?: string; // generated by server; read-only
  name: string;
  shortName: string;
  description: string;
  type: DepartmentType;
  status: DepartmentStatus;

  email: string;
  password: string; // required on create; optional on update
  phoneNumber: string;
  faxNumber?: string;
  website?: string;

  address: IAddress;

  parentDepartment?: string;
  establishedDate?: string; // YYYY-MM-DD
  headOfDepartment: IContact;
  contactPersons: IContact[];

  services: IService[];
  totalAgents: number;
  activeAgents: number;
  workingHours: WorkingHours;

  allowOnlineServices: boolean;
  requiresAppointment: boolean;
  maxAppointmentsPerDay?: number;
}

// API result type
interface ApiResponse {
  success: boolean;
  message?: string;
  error?: string;
  details?: string[];
  data?: Department[] | Department | DepartmentsApiData | null;
}

// Raw department data from API (before processing)
interface RawDepartmentData {
  _id: string;
  name: string;
  code?: string; // API uses 'code' field
  description?: string;
  location?: string; // API uses 'location' field
  phone?: string; // API uses 'phone' field
  email?: string;
  budget?: number;
  establishedDate?: string;
  status: string; // API returns lowercase status
  tags?: string[];
  totalAgents?: number;
  activeAgents?: number;
  allowOnlineServices?: boolean;
  requiresAppointment?: boolean;
  contactPersons?: IContact[];
  services?: IService[];
  workingHours?: WorkingHours;
  createdAt?: string;
  updatedAt?: string;
  loginAttempts?: number;
  [key: string]: unknown; // For any additional fields
}

// Specific type for departments list API response
interface DepartmentsApiData {
  departments: RawDepartmentData[];
  pagination?: {
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
}

// Department type for list/detail (includes server-managed fields)
interface Department extends Omit<DepartmentFormData, "establishedDate"> {
  _id: string;
  establishedDate?: string;
  lastLoginAt?: string;
  loginAttempts?: number;
  accountLockedUntil?: string;
  createdBy?: string;
  createdAt?: string;
  updatedAt?: string;
}

// ---------------------------
// Helpers/Defaults
// ---------------------------

const sriLankaMobileRegex = /^(?:\+94|0)(?:7(?:0|1|2|4|5|6|7|8)\d{7})$/; // 70,71,72,74,75,76,77,78
const emailRegex = /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,})+$/i;
const urlRegex =
  /^(https?:\/\/)?([\w-]+\.)+[\w-]{2,}(\/[\w\-._~:/?#[```@!$&'()*+,;=]*)?$/i;

const defaultDay = (open = "08:00", close = "17:00", isWorkingDay = true) => ({
  open,
  close,
  isWorkingDay,
});

const defaultWorkingHours: WorkingHours = {
  monday: defaultDay(),
  tuesday: defaultDay(),
  wednesday: defaultDay(),
  thursday: defaultDay(),
  friday: defaultDay(),
  saturday: defaultDay("08:00", "13:00", false),
  sunday: defaultDay("08:00", "13:00", false),
};

const emptyContact: IContact = {
  name: "",
  position: "",
  email: "",
  phone: "",
};

const initialFormData: DepartmentFormData = {
  departmentId: "",
  name: "",
  shortName: "",
  description: "",
  type: DepartmentType.DEPARTMENT,
  status: DepartmentStatus.ACTIVE,

  email: "",
  password: "",
  phoneNumber: "",
  faxNumber: "",
  website: "",

  address: {
    addressLine1: "",
    addressLine2: "",
    city: "",
    district: "Colombo",
    province: "Western",
    postalCode: "",
  },

  parentDepartment: "",
  establishedDate: "",
  headOfDepartment: { ...emptyContact },
  contactPersons: [],

  services: [],
  totalAgents: 0,
  activeAgents: 0,
  workingHours: { ...defaultWorkingHours },

  allowOnlineServices: true,
  requiresAppointment: false,
  maxAppointmentsPerDay: undefined,
};

// ---------------------------
// Department Details Modal
// ---------------------------

const DepartmentDetailsModal: React.FC<{
  department: Department | null;
  isOpen: boolean;
  onClose: () => void;
}> = ({ department, isOpen, onClose }) => {
  if (!isOpen || !department) return null;

  const formatDateTime = (v?: string) =>
    v ? new Date(v).toLocaleString() : "N/A";
  const formatDate = (v?: string) =>
    v ? new Date(v).toLocaleDateString() : "Not specified";

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/50 backdrop-blur-sm z-100 flex items-center justify-center p-4"
        onClick={onClose}
      >
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.9, opacity: 0 }}
          transition={{ type: "spring", duration: 0.3 }}
          className="bg-card/95 backdrop-blur-md rounded-2xl border border-border/50 shadow-2xl max-w-3xl w-full max-h-[90vh] overflow-hidden"
          onClick={(e) => e.stopPropagation()}
        >
          {/* Header */}
          <div className="bg-gradient-to-r from-[#8D153A]/10 to-[#FF5722]/10 border-b border-border/30 p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-gradient-to-r from-[#8D153A]/20 to-[#FF5722]/20 border border-[#8D153A]/30">
                  <Building2 className="w-6 h-6 text-[#8D153A]" />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-foreground">
                    {department.name}{" "}
                    <span className="text-muted-foreground">({department.shortName})</span>
                  </h2>
                  <p className="text-sm text-muted-foreground">
                    Department Details
                  </p>
                </div>
              </div>
              <button
                onClick={onClose}
                className="p-2 hover:bg-card/80 rounded-lg transition-colors duration-200"
              >
                <X className="w-5 h-5 text-muted-foreground" />
              </button>
            </div>
          </div>

          {/* Body */}
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)] space-y-6">
            {/* Basic */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                <FileText className="w-5 h-5 text-[#8D153A]" />
                Basic Information
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-1">
                  <p className="text-sm text-muted-foreground">Department ID</p>
                  <p className="font-medium flex items-center gap-2">
                    <Hash className="w-4 h-4 text-[#FFC72C]" />
                    {department.departmentId || "Auto-generated"}
                  </p>
                </div>
                <div className="space-y-1">
                  <p className="text-sm text-muted-foreground">Type</p>
                  <p className="font-medium">{department.type}</p>
                </div>
                <div className="space-y-1">
                  <p className="text-sm text-muted-foreground">Status</p>
                  <span
                    className={`inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-semibold border ${
                      department.status === DepartmentStatus.ACTIVE
                        ? "bg-[#008060]/10 text-[#008060] border-[#008060]/20"
                        : department.status === DepartmentStatus.SUSPENDED
                        ? "bg-yellow-500/10 text-yellow-600 border-yellow-600/20"
                        : "bg-[#FF5722]/10 text-[#FF5722] border-[#FF5722]/20"
                    }`}
                  >
                    {department.status === DepartmentStatus.ACTIVE ? (
                      <CheckCircle className="w-3 h-3" />
                    ) : department.status === DepartmentStatus.SUSPENDED ? (
                      <AlertCircle className="w-3 h-3" />
                    ) : (
                      <XCircle className="w-3 h-3" />
                    )}
                    {department.status}
                  </span>
                </div>
                <div className="space-y-1 md:col-span-2">
                  <p className="text-sm text-muted-foreground">Description</p>
                  <p className="text-foreground">{department.description}</p>
                </div>
              </div>
            </div>

            {/* Contact */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                <Phone className="w-5 h-5 text-blue-600" />
                Contact Information
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-1">
                  <p className="text-sm text-muted-foreground">Email</p>
                  <p className="font-medium flex items-center gap-2">
                    <Mail className="w-4 h-4 text-blue-600" />
                    {department.email}
                  </p>
                </div>
                <div className="space-y-1">
                  <p className="text-sm text-muted-foreground">Phone</p>
                  <p className="font-medium flex items-center gap-2">
                    <Phone className="w-4 h-4 text-blue-600" />
                    {department.phoneNumber}
                  </p>
                </div>
                {department.faxNumber && (
                  <div className="space-y-1">
                    <p className="text-sm text-muted-foreground">Fax</p>
                    <p className="font-medium">{department.faxNumber}</p>
                  </div>
                )}
                {department.website && (
                  <div className="space-y-1">
                    <p className="text-sm text-muted-foreground">Website</p>
                    <p className="font-medium flex items-center gap-2">
                      <Globe className="w-4 h-4 text-blue-600" />
                      {department.website}
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Address */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                <MapPin className="w-5 h-5 text-blue-600" />
                Address
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-muted-foreground">Address Line 1</p>
                  <p className="font-medium">{department.address?.addressLine1}</p>
                </div>
                {department.address?.addressLine2 && (
                  <div>
                    <p className="text-sm text-muted-foreground">Address Line 2</p>
                    <p className="font-medium">{department.address.addressLine2}</p>
                  </div>
                )}
                <div>
                  <p className="text-sm text-muted-foreground">City</p>
                  <p className="font-medium">{department.address?.city}</p>
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Postal Code</p>
                  <p className="font-medium">{department.address?.postalCode}</p>
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">District</p>
                  <p className="font-medium">{department.address?.district}</p>
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Province</p>
                  <p className="font-medium">{department.address?.province}</p>
                </div>
              </div>
            </div>

            {/* Head & Contacts */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                <Users className="w-5 h-5 text-yellow-600" />
                Organizational Contacts
              </h3>
              <div className="space-y-2">
                <p className="text-sm text-muted-foreground">Head of Department</p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <p>
                    <span className="text-muted-foreground">Name: </span>
                    <span className="font-medium">
                      {department.headOfDepartment?.name}
                    </span>
                  </p>
                  <p>
                    <span className="text-muted-foreground">Position: </span>
                    <span className="font-medium">
                      {department.headOfDepartment?.position}
                    </span>
                  </p>
                  <p>
                    <span className="text-muted-foreground">Email: </span>
                    <span className="font-medium">
                      {department.headOfDepartment?.email}
                    </span>
                  </p>
                  <p>
                    <span className="text-muted-foreground">Phone: </span>
                    <span className="font-medium">
                      {department.headOfDepartment?.phone}
                    </span>
                  </p>
                </div>
              </div>
              {department.contactPersons?.length > 0 && (
                <div className="space-y-2">
                  <p className="text-sm text-muted-foreground">Contact Persons</p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {department.contactPersons.map((c, i) => (
                      <div
                        key={i}
                        className="p-3 rounded-lg border border-border/40 bg-card/40"
                      >
                        <p className="font-semibold">{c.name}</p>
                        <p className="text-sm text-muted-foreground">{c.position}</p>
                        <p className="text-sm flex items-center gap-2 mt-1">
                          <Mail className="w-4 h-4 text-blue-600" />
                          {c.email}
                        </p>
                        <p className="text-sm flex items-center gap-2">
                          <Phone className="w-4 h-4 text-blue-600" />
                          {c.phone}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Services */}
            {department.services?.length > 0 && (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                  <FileText className="w-5 h-5 text-[#8D153A]" />
                  Services
                </h3>
                <div className="grid grid-cols-1 gap-4">
                  {department.services.map((srv, idx) => (
                    <div
                      key={idx}
                      className="p-4 rounded-xl border border-border/40 bg-card/40"
                    >
                      <div className="flex justify-between items-center">
                        <p className="font-semibold">{srv.name}</p>
                        <span
                          className={`inline-flex items-center gap-1.5 px-2 py-1 rounded-full text-xs font-semibold border ${
                            srv.isActive
                              ? "bg-[#008060]/10 text-[#008060] border-[#008060]/20"
                              : "bg-[#FF5722]/10 text-[#FF5722] border-[#FF5722]/20"
                          }`}
                        >
                          {srv.isActive ? "Active" : "Inactive"}
                        </span>
                      </div>
                      <p className="text-sm text-muted-foreground mt-1">
                        {srv.description}
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mt-3">
                        <p className="text-sm">
                          <span className="text-muted-foreground">Category: </span>
                          <span className="font-medium">{srv.category}</span>
                        </p>
                        <p className="text-sm">
                          <span className="text-muted-foreground">
                            Processing Time:{" "}
                          </span>
                          <span className="font-medium">{srv.processingTime}</span>
                        </p>
                        <p className="text-sm">
                          <span className="text-muted-foreground">Fee: </span>
                          <span className="font-medium">
                            {srv.fee !== undefined ? `Rs. ${srv.fee}` : "N/A"}
                          </span>
                        </p>
                      </div>
                      {srv.requirements?.length > 0 && (
                        <div className="flex flex-wrap gap-2 mt-3">
                          {srv.requirements.map((r, i) => (
                            <span
                              key={i}
                              className="inline-flex items-center gap-1 px-3 py-1 bg-gradient-to-r from-green-500/10 to-green-600/5 border border-green-500/20 rounded-full text-sm text-green-700 dark:text-green-300"
                            >
                              {r}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Operations */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                <Users className="w-5 h-5 text-yellow-600" />
                Operations
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <p>
                  <span className="text-muted-foreground">Total Agents: </span>
                  <span className="font-medium">{department.totalAgents}</span>
                </p>
                <p>
                  <span className="text-muted-foreground">Active Agents: </span>
                  <span className="font-medium">{department.activeAgents}</span>
                </p>
                <p>
                  <span className="text-muted-foreground">Appointments: </span>
                  <span className="font-medium">
                    {department.requiresAppointment
                      ? `Required (Max/day: ${department.maxAppointmentsPerDay || "N/A"})`
                      : "Not required"}
                  </span>
                </p>
              </div>

              <div className="space-y-2">
                <p className="text-sm text-muted-foreground flex items-center gap-2">
                  <Clock className="w-4 h-4 text-purple-600" />
                  Working Hours
                </p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {Object.entries(department.workingHours || {}).map(
                    ([day, sched]) => (
                      <div
                        key={day}
                        className="p-3 rounded-lg border border-border/40 bg-card/40 flex justify-between items-center"
                      >
                        <span className="capitalize">{day}</span>
                        {sched?.isWorkingDay ? (
                          <span className="text-sm">
                            {sched.open} - {sched.close}
                          </span>
                        ) : (
                          <span className="text-sm text-muted-foreground">
                            Closed
                          </span>
                        )}
                      </div>
                    )
                  )}
                </div>
              </div>
            </div>

            {/* Timestamps */}
            {(department.createdAt || department.updatedAt || department.establishedDate) && (
              <div className="space-y-1 pt-4 border-t border-border/30">
                {department.establishedDate && (
                  <p className="text-xs text-muted-foreground">
                    Established: {formatDate(department.establishedDate)}
                  </p>
                )}
                <p className="text-xs text-muted-foreground">
                  Created: {formatDateTime(department.createdAt)}
                </p>
                <p className="text-xs text-muted-foreground">
                  Last Updated: {formatDateTime(department.updatedAt)}
                </p>
                <p className="text-xs text-muted-foreground">
                  Last Login: {formatDateTime(department.lastLoginAt)}
                </p>
                {typeof department.loginAttempts === "number" && (
                  <p className="text-xs text-muted-foreground">
                    Login Attempts: {department.loginAttempts}
                  </p>
                )}
              </div>
            )}
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
};

// ---------------------------
// Main Page
// ---------------------------

export default function CreateDepartmentPage() {
  const [formData, setFormData] = useState<DepartmentFormData>(initialFormData);
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [submitStatus, setSubmitStatus] = useState<{
    type: "success" | "error" | null;
    message: string;
  }>({ type: null, message: "" });

  const [departments, setDepartments] = useState<Department[]>([]);
  const [isLoadingDepartments, setIsLoadingDepartments] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState<
    "all" | DepartmentStatus.ACTIVE | DepartmentStatus.INACTIVE | DepartmentStatus.SUSPENDED
  >("all");
  const [editingDepartment, setEditingDepartment] = useState<Department | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [showDepartmentsList, setShowDepartmentsList] = useState(true);
  const [showPassword, setShowPassword] = useState(false);
  const [selectedDepartment, setSelectedDepartment] = useState<Department | null>(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);

  useEffect(() => {
    fetchDepartments();
  }, []);

  const fetchDepartments = async () => {
    try {
      setIsLoadingDepartments(true);
      const response = await fetch("/api/admin/departments");
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

      const result: ApiResponse = await response.json();
      console.log("API Response:", result);

      if (result.success && result.data) {
        // Handle nested data structure where departments are in result.data.departments
        const departmentsData = Array.isArray(result.data) 
          ? result.data 
          : (result.data as DepartmentsApiData)?.departments || [];
        console.log("Departments data:", departmentsData);
        const mapped = departmentsData as RawDepartmentData[];
        // Ensure _id exists and default some nested fields to prevent undefined issues
        const safe: Department[] = mapped.map((d) => ({
          _id: d._id || "",
          // Map lowercase status to uppercase enum values
          status: d.status?.toUpperCase() as DepartmentStatus || DepartmentStatus.ACTIVE,
          // Map field names if they differ between API and frontend
          departmentId: (d.departmentId || d.code || "") as string,
          name: d.name || "",
          shortName: (d.shortName || d.name || "") as string,
          description: d.description || "",
          type: d.type as DepartmentType || DepartmentType.DEPARTMENT,
          email: d.email || "",
          password: "", // Don't include password in display
          phoneNumber: (d.phoneNumber || d.phone || "") as string,
          faxNumber: (d.faxNumber || "") as string,
          website: (d.website || "") as string,
          address: (d.address as IAddress) || {
            addressLine1: (d.location as string) || "",
            addressLine2: "",
            city: "",
            district: "Colombo" as District,
            province: "Western" as Province,
            postalCode: "",
          },
          parentDepartment: (d.parentDepartment as string) || "",
          establishedDate: d.establishedDate || "",
          headOfDepartment: (d.headOfDepartment as IContact) || { ...emptyContact },
          contactPersons: (d.contactPersons as IContact[]) || [],
          services: d.services || [],
          workingHours: d.workingHours || { ...defaultWorkingHours },
          totalAgents: d.totalAgents || 0,
          activeAgents: d.activeAgents || 0,
          allowOnlineServices: d.allowOnlineServices ?? true,
          requiresAppointment: d.requiresAppointment ?? false,
          maxAppointmentsPerDay: d.maxAppointmentsPerDay as number | undefined,
          // Server-managed fields
          lastLoginAt: d.lastLoginAt as string | undefined,
          loginAttempts: d.loginAttempts || 0,
          accountLockedUntil: d.accountLockedUntil as string | undefined,
          createdBy: d.createdBy as string | undefined,
          createdAt: d.createdAt,
          updatedAt: d.updatedAt,
        }));
        console.log("Processed departments:", safe);
        setDepartments(safe);
      } else {
        console.error("Failed to fetch departments:", result.error);
        setDepartments([]);
      }
    } catch (error) {
      console.error("Error fetching departments:", error);
      setDepartments([]);
    } finally {
      setIsLoadingDepartments(false);
    }
  };

  const handleViewDepartment = (department: Department) => {
    setSelectedDepartment(department);
    setShowDetailsModal(true);
  };

  const handleEditDepartment = (department: Department) => {
    const editData: DepartmentFormData = {
      ...initialFormData,
      ...department,
      _id: department._id,
      departmentId: department.departmentId,
      password: "", // do not prefill
      establishedDate: department.establishedDate
        ? new Date(department.establishedDate).toISOString().slice(0, 10)
        : "",
      address: { ...department.address },
      headOfDepartment: { ...department.headOfDepartment },
      contactPersons: [...(department.contactPersons || [])],
      services: [...(department.services || [])].map((s) => ({
        ...s,
      })),
      workingHours: { ...department.workingHours },
    };

    setFormData(editData);
    setEditingDepartment(department);
    setIsEditing(true);
    setShowDepartmentsList(false);
    setSubmitStatus({ type: null, message: "" });
    setErrors({});
  };

  const handleCancelEdit = () => {
    setFormData(initialFormData);
    setEditingDepartment(null);
    setIsEditing(false);
    setShowDepartmentsList(true);
    setErrors({});
    setSubmitStatus({ type: null, message: "" });
  };

  const handleDeleteDepartment = async (departmentId: string) => {
    if (
      !confirm(
        "Are you sure you want to delete this department? This action cannot be undone."
      )
    ) {
      return;
    }
    try {
      const response = await fetch(`/api/admin/departments/${departmentId}`, {
        method: "DELETE",
      });
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

      const result: ApiResponse = await response.json();
      if (result.success) {
        setSubmitStatus({
          type: "success",
          message: "Department deleted successfully!",
        });
        fetchDepartments();
        setTimeout(() => setSubmitStatus({ type: null, message: "" }), 3000);
      } else {
        setSubmitStatus({
          type: "error",
          message: result.error || "Failed to delete department",
        });
      }
    } catch (error) {
      console.error("Error deleting department:", error);
      setSubmitStatus({
        type: "error",
        message: "Network error. Please try again.",
      });
    }
  };

  const filteredDepartments = useMemo(() => {
    const term = searchTerm.trim().toLowerCase();
    return departments.filter((d) => {
      const matchesSearch =
        !term ||
        d.name?.toLowerCase().includes(term) ||
        d.shortName?.toLowerCase().includes(term) ||
        d.email?.toLowerCase().includes(term) ||
        d.type?.toLowerCase().includes(term) ||
        d.address?.district?.toLowerCase().includes(term) ||
        d.address?.city?.toLowerCase().includes(term);
      const matchesStatus = statusFilter === "all" || d.status === statusFilter;
      return matchesSearch && matchesStatus;
    });
  }, [departments, searchTerm, statusFilter]);

  // ---------------------------
  // Form Handlers
  // ---------------------------

  const clearFieldError = (name: string) => {
    if (errors[name]) setErrors((prev) => ({ ...prev, [name]: "" }));
    if (submitStatus.type) setSubmitStatus({ type: null, message: "" });
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const target = e.target as HTMLInputElement;
    const { name, value, type, checked } = target;
    const val = type === "checkbox" ? checked : value;

    // top-level fields only
    setFormData((prev) => ({ ...prev, [name]: val }));
    clearFieldError(name);
  };

  const handleAddressChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => {
      const baseAddress = { ...prev.address, [name]: value } as IAddress;
      // auto-set province when district changes
      if (name === "district" && DISTRICT_TO_PROVINCE[value as District]) {
        baseAddress.province = DISTRICT_TO_PROVINCE[value as District];
      }
      return { ...prev, address: baseAddress };
    });
    clearFieldError(`address.${name}`);
  };

  const handleHeadChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      headOfDepartment: { ...prev.headOfDepartment, [name]: value },
    }));
    clearFieldError(`headOfDepartment.${name}`);
  };

  const addContactPerson = () => {
    setFormData((prev) => ({
      ...prev,
      contactPersons: [...prev.contactPersons, { ...emptyContact }],
    }));
  };

  const updateContactPerson = (
    index: number,
    field: keyof IContact,
    value: string
  ) => {
    setFormData((prev) => {
      const updated = [...prev.contactPersons];
      updated[index] = { ...updated[index], [field]: value };
      return { ...prev, contactPersons: updated };
    });
  };

  const removeContactPerson = (index: number) => {
    setFormData((prev) => {
      const updated = [...prev.contactPersons];
      updated.splice(index, 1);
      return { ...prev, contactPersons: updated };
    });
  };

  // Services
  const addService = () => {
    setFormData((prev) => ({
      ...prev,
      services: [
        ...prev.services,
        {
          id: crypto.randomUUID(),
          name: "",
          description: "",
          category: "",
          isActive: true,
          processingTime: "",
          fee: undefined,
          requirements: [],
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        },
      ],
    }));
  };

  const updateService = (index: number, field: keyof IService, value: string | number | boolean | string[] | undefined) => {
    setFormData((prev) => {
      const services = [...prev.services];
      services[index] = { ...services[index], [field]: value };
      return { ...prev, services };
    });
  };

  const removeService = (index: number) => {
    setFormData((prev) => {
      const services = [...prev.services];
      services.splice(index, 1);
      return { ...prev, services };
    });
  };

  const addServiceRequirement = (srvIndex: number, req: string) => {
    if (!req.trim()) return;
    setFormData((prev) => {
      const services = [...prev.services];
      const rqs = services[srvIndex].requirements || [];
      services[srvIndex] = {
        ...services[srvIndex],
        requirements: [...rqs, req.trim()],
      };
      return { ...prev, services };
    });
  };

  const removeServiceRequirement = (srvIndex: number, reqIndex: number) => {
    setFormData((prev) => {
      const services = [...prev.services];
      const rqs = [...(services[srvIndex].requirements || [])];
      rqs.splice(reqIndex, 1);
      services[srvIndex] = { ...services[srvIndex], requirements: rqs };
      return { ...prev, services };
    });
  };

  // Working Hours
  const updateWorkingDay = (
    day: keyof WorkingHours,
    field: keyof DaySchedule,
    value: string | boolean
  ) => {
    setFormData((prev) => ({
      ...prev,
      workingHours: {
        ...prev.workingHours,
        [day]: { ...prev.workingHours[day], [field]: value } as DaySchedule,
      },
    }));
  };

  // ---------------------------
  // Validation
  // ---------------------------

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    // Basic info
    if (!formData.name?.trim()) newErrors["name"] = "Name is required";
    if (!formData.shortName?.trim())
      newErrors["shortName"] = "Short name is required";
    if (!formData.description?.trim())
      newErrors["description"] = "Description is required";

    if (!formData.type) newErrors["type"] = "Department type is required";

    // Contact
    if (!formData.email?.trim()) newErrors["email"] = "Email is required";
    else if (!emailRegex.test(formData.email))
      newErrors["email"] = "Invalid email format";

    if (!formData.phoneNumber?.trim())
      newErrors["phoneNumber"] = "Phone number is required";
    else if (!sriLankaMobileRegex.test(formData.phoneNumber))
      newErrors["phoneNumber"] = "Invalid Sri Lankan mobile number";

    if (formData.website && !urlRegex.test(formData.website))
      newErrors["website"] = "Invalid website URL";

    // Password
    if (!isEditing) {
      if (!formData.password?.trim())
        newErrors["password"] = "Password is required";
      else if (formData.password.length < 8)
        newErrors["password"] = "Password must be at least 8 characters";
    } else if (formData.password?.trim() && formData.password.length < 8) {
      newErrors["password"] = "Password must be at least 8 characters";
    }

    // Address
    if (!formData.address.addressLine1?.trim())
      newErrors["address.addressLine1"] = "Address line 1 is required";
    if (!formData.address.city?.trim())
      newErrors["address.city"] = "City is required";
    if (!formData.address.district)
      newErrors["address.district"] = "District is required";
    if (!formData.address.province)
      newErrors["address.province"] = "Province is required";
    if (!/^\d{5}$/.test(formData.address.postalCode || ""))
      newErrors["address.postalCode"] = "Postal code must be 5 digits";

    // Head of department
    if (!formData.headOfDepartment.name?.trim())
      newErrors["headOfDepartment.name"] = "Head name is required";
    if (!formData.headOfDepartment.position?.trim())
      newErrors["headOfDepartment.position"] = "Head position is required";
    if (!formData.headOfDepartment.email?.trim())
      newErrors["headOfDepartment.email"] = "Head email is required";
    else if (!emailRegex.test(formData.headOfDepartment.email))
      newErrors["headOfDepartment.email"] = "Invalid email format";
    if (!formData.headOfDepartment.phone?.trim())
      newErrors["headOfDepartment.phone"] = "Head phone is required";
    else if (!sriLankaMobileRegex.test(formData.headOfDepartment.phone))
      newErrors["headOfDepartment.phone"] = "Invalid Sri Lankan mobile number";

    // Contact persons (if any, then validate)
    formData.contactPersons.forEach((c, idx) => {
      if (!c.name?.trim()) newErrors[`contactPersons.${idx}.name`] = "Name required";
      if (!c.position?.trim())
        newErrors[`contactPersons.${idx}.position`] = "Position required";
      if (!c.email?.trim())
        newErrors[`contactPersons.${idx}.email`] = "Email required";
      else if (!emailRegex.test(c.email))
        newErrors[`contactPersons.${idx}.email`] = "Invalid email";
      if (!c.phone?.trim())
        newErrors[`contactPersons.${idx}.phone`] = "Phone required";
      else if (!sriLankaMobileRegex.test(c.phone))
        newErrors[`contactPersons.${idx}.phone`] = "Invalid SL mobile number";
    });

    // Services (if any, enforce required fields per service)
    formData.services.forEach((s, idx) => {
      if (!s.name?.trim()) newErrors[`services.${idx}.name`] = "Service name required";
      if (!s.description?.trim())
        newErrors[`services.${idx}.description`] = "Description required";
      if (!s.category?.trim())
        newErrors[`services.${idx}.category`] = "Category required";
      if (!s.processingTime?.trim())
        newErrors[`services.${idx}.processingTime`] = "Processing time required";
      if (s.fee !== undefined && s.fee !== null) {
        if (isNaN(Number(s.fee)) || Number(s.fee) < 0) {
          newErrors[`services.${idx}.fee`] = "Fee must be a valid non-negative number";
        }
      }
    });

    // Operations
    if (formData.totalAgents < 0)
      newErrors["totalAgents"] = "Total agents cannot be negative";
    if (formData.activeAgents < 0)
      newErrors["activeAgents"] = "Active agents cannot be negative";
    if (formData.activeAgents > formData.totalAgents)
      newErrors["activeAgents"] = "Active agents cannot exceed total agents";

    // Appointments
    if (formData.requiresAppointment) {
      if (
        formData.maxAppointmentsPerDay === undefined ||
        formData.maxAppointmentsPerDay === null ||
        Number(formData.maxAppointmentsPerDay) < 1
      ) {
        newErrors["maxAppointmentsPerDay"] = "Enter a valid max appointments per day (>=1)";
      }
    }

    // Working hours sanity check
    Object.entries(formData.workingHours).forEach(([day, sch]) => {
      const d = day as keyof WorkingHours;
      if (sch.isWorkingDay) {
        if (!sch.open || !sch.close) {
          newErrors[`workingHours.${d}`] = "Open/Close times required for working day";
        } else if (sch.open >= sch.close) {
          newErrors[`workingHours.${d}`] = "Open time must be earlier than close time";
        }
      }
    });

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // ---------------------------
  // Submit
  // ---------------------------

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) {
      setSubmitStatus({
        type: "error",
        message: "Please fix the validation errors before submitting.",
      });
      return;
    }

    setIsLoading(true);
    setSubmitStatus({ type: null, message: "" });

    try {
      const url = isEditing
        ? `/api/admin/departments/${editingDepartment?._id}`
        : "/api/admin/departments";
      const method = isEditing ? "PUT" : "POST";

      const payload: Partial<DepartmentFormData> = {
        name: formData.name.trim(),
        shortName: formData.shortName.trim(),
        description: formData.description.trim(),
        type: formData.type,
        status: formData.status,
        email: formData.email.trim().toLowerCase(),
        phoneNumber: formData.phoneNumber.trim(),
        faxNumber: formData.faxNumber?.trim() || undefined,
        website: formData.website?.trim() || undefined,
        address: {
          addressLine1: formData.address.addressLine1.trim(),
          addressLine2: formData.address.addressLine2?.trim() || undefined,
          city: formData.address.city.trim(),
          district: formData.address.district,
          province: formData.address.province,
          postalCode: formData.address.postalCode.trim(),
        },
        parentDepartment: formData.parentDepartment?.trim() || undefined,
        establishedDate: formData.establishedDate
          ? new Date(formData.establishedDate).toISOString()
          : undefined,
        headOfDepartment: {
          name: formData.headOfDepartment.name.trim(),
          position: formData.headOfDepartment.position.trim(),
          email: formData.headOfDepartment.email.trim().toLowerCase(),
          phone: formData.headOfDepartment.phone.trim(),
        },
        contactPersons: formData.contactPersons.map((c) => ({
          name: c.name.trim(),
          position: c.position.trim(),
          email: c.email.trim().toLowerCase(),
          phone: c.phone.trim(),
        })),
        services: formData.services.map((s) => ({
          id: s.id || crypto.randomUUID(),
          name: s.name.trim(),
          description: s.description.trim(),
          category: s.category.trim(),
          isActive: !!s.isActive,
          processingTime: s.processingTime.trim(),
          fee:
            s.fee !== undefined && s.fee !== null
              ? Number(s.fee)
              : undefined,
          requirements: (s.requirements || []).map((r) => r.trim()).filter(Boolean),
          createdAt: s.createdAt || new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        })),
        totalAgents: Number(formData.totalAgents) || 0,
        activeAgents: Number(formData.activeAgents) || 0,
        workingHours: formData.workingHours,
        allowOnlineServices: !!formData.allowOnlineServices,
        requiresAppointment: !!formData.requiresAppointment,
        maxAppointmentsPerDay:
          formData.requiresAppointment && formData.maxAppointmentsPerDay
            ? Number(formData.maxAppointmentsPerDay)
            : undefined,
      };

      // Password: required on create; optional on update
      if (!isEditing || (isEditing && formData.password.trim())) {
        payload.password = formData.password.trim();
      }

      const response = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(
          `HTTP error! status: ${response.status}, message: ${errorText}`
        );
      }

      const result: ApiResponse = await response.json();

      if (result.success) {
        setSubmitStatus({
          type: "success",
          message:
            result.message ||
            `Department ${isEditing ? "updated" : "created"} successfully!`,
        });

        await fetchDepartments();

        setTimeout(() => {
          setFormData(initialFormData);
          setEditingDepartment(null);
          setIsEditing(false);
          setShowDepartmentsList(true);
          setSubmitStatus({ type: null, message: "" });
          setErrors({});
        }, 1500);
      } else {
        setSubmitStatus({
          type: "error",
          message:
            result.details?.join(", ") ||
            result.error ||
            `Failed to ${isEditing ? "update" : "create"} department`,
        });
      }
    } catch (error: unknown) {
      console.error(`Error ${isEditing ? "updating" : "creating"} department:`, error);
      setSubmitStatus({
        type: "error",
        message:
          error instanceof Error ? error.message :
          "Network error. Please check your connection and try again.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSaveAsDraft = async () => {
    console.log("Save as draft:", formData);
    setSubmitStatus({
      type: "success",
      message: "Draft functionality will be implemented in a future update.",
    });
    setTimeout(() => {
      setSubmitStatus({ type: null, message: "" });
    }, 2000);
  };

  const handleCreateNew = () => {
    setFormData(initialFormData);
    setEditingDepartment(null);
    setIsEditing(false);
    setShowDepartmentsList(false);
    setErrors({});
    setSubmitStatus({ type: null, message: "" });
  };

  // ---------------------------
  // UI
  // ---------------------------

  return (
    <div className="relative min-h-full">
      {/* Details Modal */}
      <DepartmentDetailsModal
        department={selectedDepartment}
        isOpen={showDetailsModal}
        onClose={() => setShowDetailsModal(false)}
      />

      {/* Main */}
      <div className="space-y-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
          className="flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center"
        >
          <div className="animate-fade-in-up">
            <h1 className="text-3xl font-bold text-foreground mb-2">
              <span className="flex items-center gap-3">
                <Building2 className="w-8 h-8 text-[#8D153A]" />
                <span className="text-foreground">Department</span>{" "}
                <span className="bg-gradient-to-r from-[#8D153A] to-[#FF5722] bg-clip-text text-transparent">
                  Management
                </span>
              </span>
            </h1>
            <p className="text-muted-foreground">
              Create and manage departments aligned with your schema
            </p>
          </div>

          {/* Toggle View */}
          <div className="flex gap-2">
            {isEditing && (
              <button
                onClick={handleCancelEdit}
                className="flex items-center gap-2 px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl hover:bg-card/80 hover:border-[#FF5722]/50 transition-all duration-300 modern-card"
              >
                <X className="w-4 h-4" />
                Cancel Edit
              </button>
            )}
            <button
              onClick={() =>
                showDepartmentsList ? handleCreateNew() : setShowDepartmentsList(true)
              }
             className="flex items-center gap-2 bg-gradient-to-r from-[#8D153A] to-[#FF5722] dark:bg-gradient-to-r dark:from-[#8D153A] dark:to-[#FF5722] text-gray-500  px-4 py-2.5 rounded-xl hover:shadow-lg transition-all duration-300 hover:scale-105 modern-card"

            >
              <Plus className="w-4 h-4" />
              {showDepartmentsList ? "Create New" : "View Departments"}
            </button>
          </div>
        </motion.div>

        {/* Status Messages */}
        {submitStatus.type && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className={`p-4 rounded-xl flex items-center gap-3 ${
              submitStatus.type === "success"
                ? "bg-green-100 border border-green-200 text-green-800 dark:bg-green-900/20 dark:border-green-800/30 dark:text-green-300"
                : "bg-red-100 border border-red-200 text-red-800 dark:bg-red-900/20 dark:border-red-800/30 dark:text-red-300"
            }`}
          >
            {submitStatus.type === "success" ? (
              <CheckCircle className="w-5 h-5" />
            ) : (
              <AlertCircle className="w-5 h-5" />
            )}
            <span className="font-medium">{submitStatus.message}</span>
          </motion.div>
        )}

        {/* Departments List View */}
        {showDepartmentsList && !isEditing && (
          <div className="space-y-6">
            {/* Search/Filters */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1, duration: 0.3 }}
              className="flex flex-col sm:flex-row gap-4"
            >
              <div className="relative flex-1 group">
                <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground group-focus-within:text-[#8D153A] transition-colors duration-300" />
                <input
                  type="text"
                  placeholder="Search by name, short name, email, type, city, district..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl focus:ring-2 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50 transition-all duration-300 modern-card hover:shadow-md"
                />
              </div>
              <div className="flex gap-3">
                <select
                  value={statusFilter}
                  onChange={(e) =>
                    setStatusFilter(
                      e.target.value as
                        | "all"
                        | DepartmentStatus.ACTIVE
                        | DepartmentStatus.INACTIVE
                        | DepartmentStatus.SUSPENDED
                    )
                  }
                  className="px-3 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl focus:ring-2 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50 transition-all duration-300 modern-card hover:shadow-md"
                >
                  <option value="all">All Status</option>
                  <option value={DepartmentStatus.ACTIVE}>Active</option>
                  <option value={DepartmentStatus.INACTIVE}>Inactive</option>
                  <option value={DepartmentStatus.SUSPENDED}>Suspended</option>
                </select>
                <button className="flex items-center gap-2 px-3 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl hover:bg-card/80 hover:border-[#FFC72C]/50 transition-all duration-300 modern-card hover:shadow-md">
                  <Filter className="w-4 h-4 text-[#FFC72C]" />
                  Filter
                </button>
              </div>
            </motion.div>

            {/* Grid */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2, duration: 0.3 }}
              className="bg-card/90 dark:bg-card/95 backdrop-blur-md rounded-2xl border border-border/50 shadow-glow hover:shadow-2xl transition-all duration-500 modern-card overflow-hidden"
            >
              {isLoadingDepartments ? (
                <div className="flex items-center justify-center py-12">
                  <div className="w-8 h-8 border-2 border-[#8D153A]/30 border-t-[#8D153A] rounded-full animate-spin" />
                </div>
              ) : filteredDepartments.length === 0 ? (
                <div className="text-center py-12">
                  <Building2 className="w-16 h-16 text-muted-foreground mx-auto mb-4 opacity-50" />
                  <h3 className="text-lg font-medium text-muted-foreground mb-2">
                    {departments.length === 0
                      ? "No departments created yet"
                      : "No departments match your search"}
                  </h3>
                  <p className="text-sm text-muted-foreground">
                    {departments.length === 0
                      ? "Create your first department to get started"
                      : "Try adjusting your search criteria"}
                  </p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gradient-to-r from-[#8D153A]/5 to-[#FF5722]/5 border-b border-border/30">
                      <tr>
                        <th className="text-left p-4 font-semibold text-foreground">
                          Department
                        </th>
                        <th className="text-left p-4 font-semibold text-foreground">
                          Type
                        </th>
                        <th className="text-left p-4 font-semibold text-foreground">
                          Address
                        </th>
                        <th className="text-left p-4 font-semibold text-foreground">
                          Status
                        </th>
                        <th className="text-left p-4 font-semibold text-foreground">
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredDepartments.map((department, index) => (
                        <motion.tr
                          key={department._id}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: 0.05 * index, duration: 0.2 }}
                          className="border-t border-border/20 hover:bg-card/30 transition-all duration-300 group cursor-pointer"
                          onClick={() => handleViewDepartment(department)}
                        >
                          <td className="p-4">
                            <div className="flex items-center gap-3">
                              <div className="p-2 rounded-lg bg-gradient-to-r from-[#8D153A]/10 to-[#FF5722]/10 border border-[#8D153A]/20">
                                <Building2 className="w-5 h-5 text-[#8D153A]" />
                              </div>
                              <div>
                                <p className="font-semibold text-foreground group-hover:text-[#8D153A] transition-colors duration-300">
                                  {department.name}
                                </p>
                                <p className="text-sm text-muted-foreground">
                                  {department.shortName}
                                  {department.departmentId
                                    ? ` • ID: ${department.departmentId}`
                                    : ""}
                                </p>
                              </div>
                            </div>
                          </td>
                          <td className="p-4">
                            <span className="text-foreground">{department.type}</span>
                          </td>
                          <td className="p-4">
                            <div className="flex items-center gap-2">
                              <MapPin className="w-4 h-4 text-blue-600" />
                              <span className="text-foreground">
                                {department.address?.city},{" "}
                                {department.address?.district}
                              </span>
                            </div>
                          </td>
                          <td className="p-4">
                            <span
                              className={`inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-semibold border ${
                                department.status === DepartmentStatus.ACTIVE
                                  ? "bg-[#008060]/10 text-[#008060] border-[#008060]/20"
                                  : department.status === DepartmentStatus.SUSPENDED
                                  ? "bg-yellow-500/10 text-yellow-600 border-yellow-600/20"
                                  : "bg-[#FF5722]/10 text-[#FF5722] border-[#FF5722]/20"
                              }`}
                            >
                              {department.status === DepartmentStatus.ACTIVE ? (
                                <CheckCircle className="w-3 h-3" />
                              ) : department.status === DepartmentStatus.SUSPENDED ? (
                                <AlertCircle className="w-3 h-3" />
                              ) : (
                                <XCircle className="w-3 h-3" />
                              )}
                              {department.status}
                            </span>
                          </td>
                          <td className="p-4">
                            <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-all duration-300">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleViewDepartment(department);
                                }}
                                className="p-2 bg-blue-500/10 hover:bg-blue-500/20 text-blue-600 rounded-lg transition-all duration-300 hover:scale-110"
                                title="View Details"
                              >
                                <Eye className="w-4 h-4" />
                              </button>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleEditDepartment(department);
                                }}
                                className="p-2 bg-yellow-500/10 hover:bg-yellow-500/20 text-yellow-600 rounded-lg transition-all duration-300 hover:scale-110"
                                title="Edit Department"
                              >
                                <Edit className="w-4 h-4" />
                              </button>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleDeleteDepartment(department._id);
                                }}
                                className="p-2 bg-red-500/10 hover:bg-red-500/20 text-red-600 rounded-lg transition-all duration-300 hover:scale-110"
                                title="Delete Department"
                              >
                                <Trash2 className="w-4 h-4" />
                              </button>
                            </div>
                          </td>
                        </motion.tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </motion.div>
          </div>
        )}

        {/* Create/Edit Department Form */}
        {(!showDepartmentsList || isEditing) && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className="bg-card/90 dark:bg-card/95 backdrop-blur-md rounded-2xl border border-border/50 shadow-glow hover:shadow-2xl transition-all duration-500 modern-card overflow-hidden"
          >
            <div className="bg-gradient-to-r from-[#8D153A]/10 to-[#FF5722]/10 border-b border-border/30 p-6">
              <h2 className="text-2xl font-bold text-foreground flex items-center gap-3">
                <div className="p-2 rounded-lg bg-gradient-to-r from-[#8D153A]/20 to-[#FF5722]/20 border border-[#8D153A]/30">
                  <Building2 className="w-6 h-6 text-[#8D153A]" />
                </div>
                {isEditing ? "Edit Department" : "Create New Department"}
              </h2>
              <p className="text-muted-foreground mt-1">
                {isEditing
                  ? "Update department information"
                  : "Fill in the details to create a new department"}
              </p>
            </div>

            <form onSubmit={handleSubmit} className="p-6 space-y-8">
              {/* Basic Information */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                  <FileText className="w-5 h-5 text-[#8D153A]" />
                  Basic Information
                </h3>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Department Name *
                    </label>
                    <input
                      type="text"
                      name="name"
                      value={formData.name}
                      onChange={handleInputChange}
                      placeholder="Enter department name"
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors.name
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors.name && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors.name}
                      </p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Short Name *
                    </label>
                    <input
                      type="text"
                      name="shortName"
                      value={formData.shortName}
                      onChange={handleInputChange}
                      placeholder="e.g., ICTA, SLT, MOH"
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors.shortName
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors.shortName && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors.shortName}
                      </p>
                    )}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-foreground mb-2">
                    Description *
                  </label>
                  <textarea
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    placeholder="Describe the department's purpose and responsibilities"
                    rows={3}
                    className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md resize-none ${
                      errors.description
                        ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                        : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                    }`}
                  />
                  {errors.description && (
                    <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                      <AlertCircle className="w-3 h-3" />
                      {errors.description}
                    </p>
                  )}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Type *
                    </label>
                    <select
                      name="type"
                      value={formData.type}
                      onChange={handleInputChange}
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors.type
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    >
                      {Object.values(DepartmentType).map((t) => (
                        <option key={t} value={t}>
                          {t}
                        </option>
                      ))}
                    </select>
                    {errors.type && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors.type}
                      </p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Status
                    </label>
                    <select
                      name="status"
                      value={formData.status}
                      onChange={handleInputChange}
                      className="w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl focus:ring-2 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50 transition-all duration-300 modern-card hover:shadow-md"
                    >
                      {Object.values(DepartmentStatus).map((s) => (
                        <option key={s} value={s}>
                          {s}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Department ID
                    </label>
                    <input
                      type="text"
                      value={formData.departmentId || ""}
                      disabled
                      placeholder="Auto-generated on create"
                      className="w-full px-4 py-2.5 bg-card/40 border border-border/40 rounded-xl text-muted-foreground"
                    />
                  </div>
                </div>
              </div>

              {/* Contact Information */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                  <Phone className="w-5 h-5 text-blue-600" />
                  Contact Information
                </h3>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Email Address *
                    </label>
                    <input
                      type="email"
                      name="email"
                      value={formData.email}
                      onChange={handleInputChange}
                      placeholder="department@example.gov.lk"
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors.email
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors.email && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors.email}
                      </p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Phone Number *
                    </label>
                    <input
                      type="tel"
                      name="phoneNumber"
                      value={formData.phoneNumber}
                      onChange={handleInputChange}
                      placeholder="+94771234567 or 0771234567"
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors.phoneNumber
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors.phoneNumber && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors.phoneNumber}
                      </p>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Fax Number
                    </label>
                    <input
                      type="text"
                      name="faxNumber"
                      value={formData.faxNumber || ""}
                      onChange={handleInputChange}
                      placeholder="Optional"
                      className="w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl focus:ring-2 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50 transition-all duration-300 modern-card hover:shadow-md"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Website
                    </label>
                    <div className="relative">
                      <input
                        type="text"
                        name="website"
                        value={formData.website || ""}
                        onChange={handleInputChange}
                        placeholder="https://www.example.gov.lk"
                        className={`w-full pl-10 pr-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                          errors.website
                            ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                            : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                        }`}
                      />
                      <Globe className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground" />
                    </div>
                    {errors.website && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors.website}
                      </p>
                    )}
                  </div>
                </div>

                {/* Password */}
                <div>
                  <label className="block text-sm font-medium text-foreground mb-2">
                    Department Password {isEditing ? "(leave blank to keep current)" : "*"}
                  </label>
                  <div className="relative">
                    <input
                      type={showPassword ? "text" : "password"}
                      name="password"
                      value={formData.password}
                      onChange={handleInputChange}
                      placeholder="Enter department password"
                      className={`w-full px-4 py-2.5 pr-12 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors.password
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-[#8D153A] transition-colors duration-300"
                    >
                      {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                    </button>
                  </div>
                  {errors.password && (
                    <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                      <AlertCircle className="w-3 h-3" />
                      {errors.password}
                    </p>
                  )}
                  <p className="text-xs text-muted-foreground mt-1">
                    Password must be at least 8 characters long
                  </p>
                </div>
              </div>

              {/* Address */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                  <MapPin className="w-5 h-5 text-blue-600" />
                  Address
                </h3>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Address Line 1 *
                    </label>
                    <input
                      type="text"
                      name="addressLine1"
                      value={formData.address.addressLine1}
                      onChange={handleAddressChange}
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors["address.addressLine1"]
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors["address.addressLine1"] && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors["address.addressLine1"]}
                      </p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Address Line 2
                    </label>
                    <input
                      type="text"
                      name="addressLine2"
                      value={formData.address.addressLine2 || ""}
                      onChange={handleAddressChange}
                      className="w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl focus:ring-2 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50 transition-all duration-300 modern-card hover:shadow-md"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      City *
                    </label>
                    <input
                      type="text"
                      name="city"
                      value={formData.address.city}
                      onChange={handleAddressChange}
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors["address.city"]
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors["address.city"] && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors["address.city"]}
                      </p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      District *
                    </label>
                    <select
                      name="district"
                      value={formData.address.district}
                      onChange={handleAddressChange}
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors["address.district"]
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    >
                      {SRI_LANKAN_DISTRICTS.map((d) => (
                        <option key={d} value={d}>
                          {d}
                        </option>
                      ))}
                    </select>
                    {errors["address.district"] && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors["address.district"]}
                      </p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Province *
                    </label>
                    <select
                      name="province"
                      value={formData.address.province}
                      onChange={handleAddressChange}
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors["address.province"]
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    >
                      {SRI_LANKAN_PROVINCES.map((p) => (
                        <option key={p} value={p}>
                          {p}
                        </option>
                      ))}
                    </select>
                    {errors["address.province"] && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors["address.province"]}
                      </p>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Postal Code *
                    </label>
                    <input
                      type="text"
                      name="postalCode"
                      value={formData.address.postalCode}
                      onChange={handleAddressChange}
                      placeholder="5-digit postal code"
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors["address.postalCode"]
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors["address.postalCode"] && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors["address.postalCode"]}
                      </p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Parent Department
                    </label>
                    <input
                      type="text"
                      name="parentDepartment"
                      value={formData.parentDepartment || ""}
                      onChange={handleInputChange}
                      placeholder="Optional"
                      className="w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl focus:ring-2 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50 transition-all duration-300 modern-card hover:shadow-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Established Date
                    </label>
                    <input
                      type="date"
                      name="establishedDate"
                      value={formData.establishedDate || ""}
                      onChange={handleInputChange}
                      className="w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl focus:ring-2 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50 transition-all duration-300 modern-card hover:shadow-md"
                    />
                  </div>
                </div>
              </div>

              {/* Head of Department */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                  <Users className="w-5 h-5 text-yellow-600" />
                  Head of Department
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Name *
                    </label>
                    <input
                      type="text"
                      name="name"
                      value={formData.headOfDepartment.name}
                      onChange={handleHeadChange}
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors["headOfDepartment.name"]
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors["headOfDepartment.name"] && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors["headOfDepartment.name"]}
                      </p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Position *
                    </label>
                    <input
                      type="text"
                      name="position"
                      value={formData.headOfDepartment.position}
                      onChange={handleHeadChange}
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors["headOfDepartment.position"]
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors["headOfDepartment.position"] && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors["headOfDepartment.position"]}
                      </p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Email *
                    </label>
                    <input
                      type="email"
                      name="email"
                      value={formData.headOfDepartment.email}
                      onChange={handleHeadChange}
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors["headOfDepartment.email"]
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors["headOfDepartment.email"] && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors["headOfDepartment.email"]}
                      </p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Phone *
                    </label>
                    <input
                      type="tel"
                      name="phone"
                      value={formData.headOfDepartment.phone}
                      onChange={handleHeadChange}
                      placeholder="+9477xxxxxxx or 077xxxxxxx"
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl focus:ring-2 transition-all duration-300 modern-card hover:shadow-md ${
                        errors["headOfDepartment.phone"]
                          ? "border-red-500 focus:ring-red-500/20 focus:border-red-500"
                          : "border-border/50 focus:ring-[#8D153A]/20 focus:border-[#8D153A]/50"
                      }`}
                    />
                    {errors["headOfDepartment.phone"] && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <AlertCircle className="w-3 h-3" />
                        {errors["headOfDepartment.phone"]}
                      </p>
                    )}
                  </div>
                </div>
              </div>

              {/* Contact Persons */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                    <Users className="w-5 h-5 text-yellow-600" />
                    Contact Persons
                  </h3>
                  <button
                    type="button"
                    onClick={addContactPerson}
                    className="flex items-center gap-2 px-3 py-2 bg-green-600/10 text-green-700 dark:text-green-300 border border-green-600/20 rounded-xl hover:bg-green-600/20 transition"
                  >
                    <Plus className="w-4 h-4" />
                    Add Contact
                  </button>
                </div>

                {formData.contactPersons.length === 0 && (
                  <p className="text-sm text-muted-foreground">
                    No additional contact persons added.
                  </p>
                )}

                <div className="space-y-3">
                  {formData.contactPersons.map((c, idx) => (
                    <div
                      key={idx}
                      className="p-4 rounded-xl border border-border/50 bg-card/40"
                    >
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                          <label className="block text-sm font-medium text-foreground mb-1">
                            Name *
                          </label>
                          <input
                            type="text"
                            value={c.name}
                            onChange={(e) => updateContactPerson(idx, "name", e.target.value)}
                            className={`w-full px-3 py-2 bg-card/60 border rounded-lg ${
                              errors[`contactPersons.${idx}.name`]
                                ? "border-red-500"
                                : "border-border/50"
                            }`}
                          />
                          {errors[`contactPersons.${idx}.name`] && (
                            <p className="text-red-500 text-xs mt-1">
                              {errors[`contactPersons.${idx}.name`]}
                            </p>
                          )}
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-foreground mb-1">
                            Position *
                          </label>
                          <input
                            type="text"
                            value={c.position}
                            onChange={(e) =>
                              updateContactPerson(idx, "position", e.target.value)
                            }
                            className={`w-full px-3 py-2 bg-card/60 border rounded-lg ${
                              errors[`contactPersons.${idx}.position`]
                                ? "border-red-500"
                                : "border-border/50"
                            }`}
                          />
                          {errors[`contactPersons.${idx}.position`] && (
                            <p className="text-red-500 text-xs mt-1">
                              {errors[`contactPersons.${idx}.position`]}
                            </p>
                          )}
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-foreground mb-1">
                            Email *
                          </label>
                          <input
                            type="email"
                            value={c.email}
                            onChange={(e) => updateContactPerson(idx, "email", e.target.value)}
                            className={`w-full px-3 py-2 bg-card/60 border rounded-lg ${
                              errors[`contactPersons.${idx}.email`]
                                ? "border-red-500"
                                : "border-border/50"
                            }`}
                          />
                          {errors[`contactPersons.${idx}.email`] && (
                            <p className="text-red-500 text-xs mt-1">
                              {errors[`contactPersons.${idx}.email`]}
                            </p>
                          )}
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-foreground mb-1">
                            Phone *
                          </label>
                          <input
                            type="tel"
                            value={c.phone}
                            onChange={(e) => updateContactPerson(idx, "phone", e.target.value)}
                            className={`w-full px-3 py-2 bg-card/60 border rounded-lg ${
                              errors[`contactPersons.${idx}.phone`]
                                ? "border-red-500"
                                : "border-border/50"
                            }`}
                          />
                          {errors[`contactPersons.${idx}.phone`] && (
                            <p className="text-red-500 text-xs mt-1">
                              {errors[`contactPersons.${idx}.phone`]}
                            </p>
                          )}
                        </div>
                      </div>
                      <div className="flex justify-end mt-3">
                        <button
                          type="button"
                          onClick={() => removeContactPerson(idx)}
                          className="px-3 py-2 text-red-600 bg-red-600/10 border border-red-600/20 rounded-lg hover:bg-red-600/20 transition"
                        >
                          Remove Contact
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Services */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                    <FileText className="w-5 h-5 text-[#8D153A]" />
                    Services
                  </h3>
                  <button
                    type="button"
                    onClick={addService}
                    className="flex items-center gap-2 px-3 py-2 bg-green-600/10 text-green-700 dark:text-green-300 border border-green-600/20 rounded-xl hover:bg-green-600/20 transition"
                  >
                    <Plus className="w-4 h-4" />
                    Add Service
                  </button>
                </div>

                {formData.services.length === 0 && (
                  <p className="text-sm text-muted-foreground">
                    No services added yet.
                  </p>
                )}

                <div className="space-y-4">
                  {formData.services.map((s, idx) => {
                    return (
                      <div
                        key={s.id || idx}
                        className="p-4 rounded-xl border border-border/50 bg-card/40"
                      >
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                          <div>
                            <label className="block text-sm font-medium text-foreground mb-1">
                              Service Name *
                            </label>
                            <input
                              type="text"
                              value={s.name}
                              onChange={(e) => updateService(idx, "name", e.target.value)}
                              className={`w-full px-3 py-2 bg-card/60 border rounded-lg ${
                                errors[`services.${idx}.name`]
                                  ? "border-red-500"
                                  : "border-border/50"
                              }`}
                            />
                            {errors[`services.${idx}.name`] && (
                              <p className="text-red-500 text-xs mt-1">
                                {errors[`services.${idx}.name`]}
                              </p>
                            )}
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-foreground mb-1">
                              Category *
                            </label>
                            <input
                              type="text"
                              value={s.category}
                              onChange={(e) =>
                                updateService(idx, "category", e.target.value)
                              }
                              className={`w-full px-3 py-2 bg-card/60 border rounded-lg ${
                                errors[`services.${idx}.category`]
                                  ? "border-red-500"
                                  : "border-border/50"
                              }`}
                            />
                            {errors[`services.${idx}.category`] && (
                              <p className="text-red-500 text-xs mt-1">
                                {errors[`services.${idx}.category`]}
                              </p>
                            )}
                          </div>
                          <div className="md:col-span-2">
                            <label className="block text-sm font-medium text-foreground mb-1">
                              Description *
                            </label>
                            <textarea
                              rows={2}
                              value={s.description}
                              onChange={(e) =>
                                updateService(idx, "description", e.target.value)
                              }
                              className={`w-full px-3 py-2 bg-card/60 border rounded-lg resize-none ${
                                errors[`services.${idx}.description`]
                                  ? "border-red-500"
                                  : "border-border/50"
                              }`}
                            />
                            {errors[`services.${idx}.description`] && (
                              <p className="text-red-500 text-xs mt-1">
                                {errors[`services.${idx}.description`]}
                              </p>
                            )}
                          </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-4 gap-3 mt-3">
                          <div className="md:col-span-2">
                            <label className="block text-sm font-medium text-foreground mb-1">
                              Processing Time *
                            </label>
                            <input
                              type="text"
                              placeholder="e.g., 3-5 working days"
                              value={s.processingTime}
                              onChange={(e) =>
                                updateService(idx, "processingTime", e.target.value)
                              }
                              className={`w-full px-3 py-2 bg-card/60 border rounded-lg ${
                                errors[`services.${idx}.processingTime`]
                                  ? "border-red-500"
                                  : "border-border/50"
                              }`}
                            />
                            {errors[`services.${idx}.processingTime`] && (
                              <p className="text-red-500 text-xs mt-1">
                                {errors[`services.${idx}.processingTime`]}
                              </p>
                            )}
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-foreground mb-1">
                              Fee (LKR)
                            </label>
                            <input
                              type="number"
                              min={0}
                              step="0.01"
                              value={s.fee ?? ""}
                              onChange={(e) =>
                                updateService(idx, "fee", e.target.value === "" ? undefined : Number(e.target.value))
                              }
                              className={`w-full px-3 py-2 bg-card/60 border rounded-lg ${
                                errors[`services.${idx}.fee`]
                                  ? "border-red-500"
                                  : "border-border/50"
                              }`}
                            />
                            {errors[`services.${idx}.fee`] && (
                              <p className="text-red-500 text-xs mt-1">
                                {errors[`services.${idx}.fee`]}
                              </p>
                            )}
                          </div>
                          <div className="flex items-end">
                            <label className="inline-flex items-center gap-2">
                              <input
                                type="checkbox"
                                checked={!!s.isActive}
                                onChange={(e) =>
                                  updateService(idx, "isActive", e.target.checked)
                                }
                                className="h-4 w-4"
                              />
                              <span className="text-sm">Active</span>
                            </label>
                          </div>
                        </div>

                        {/* Requirements */}
                        <div className="mt-3">
                          <label className="block text-sm font-medium text-foreground mb-1">
                            Requirements
                          </label>
                          <ServiceRequirementsEditor
                            service={s}
                            onAdd={(req) => addServiceRequirement(idx, req)}
                            onRemove={(reqIdx) => removeServiceRequirement(idx, reqIdx)}
                          />
                        </div>

                        <div className="flex justify-end mt-3">
                          <button
                            type="button"
                            onClick={() => removeService(idx)}
                            className="px-3 py-2 text-red-600 bg-red-600/10 border border-red-600/20 rounded-lg hover:bg-red-600/20 transition"
                          >
                            Remove Service
                          </button>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Operations */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground flex items-center gap-2">
                  <Users className="w-5 h-5 text-yellow-600" />
                  Operations
                </h3>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Total Agents
                    </label>
                    <input
                      type="number"
                      min={0}
                      name="totalAgents"
                      value={formData.totalAgents}
                      onChange={(e) =>
                        setFormData((prev) => ({
                          ...prev,
                          totalAgents: Number(e.target.value || 0),
                        }))
                      }
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl ${
                        errors["totalAgents"]
                          ? "border-red-500"
                          : "border-border/50"
                      }`}
                    />
                    {errors["totalAgents"] && (
                      <p className="text-red-500 text-sm mt-1">{errors["totalAgents"]}</p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Active Agents
                    </label>
                    <input
                      type="number"
                      min={0}
                      name="activeAgents"
                      value={formData.activeAgents}
                      onChange={(e) =>
                        setFormData((prev) => ({
                          ...prev,
                          activeAgents: Number(e.target.value || 0),
                        }))
                      }
                      className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl ${
                        errors["activeAgents"]
                          ? "border-red-500"
                          : "border-border/50"
                      }`}
                    />
                    {errors["activeAgents"] && (
                      <p className="text-red-500 text-sm mt-1">
                        {errors["activeAgents"]}
                      </p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Allow Online Services
                    </label>
                    <label className="inline-flex items-center gap-2">
                      <input
                        type="checkbox"
                        name="allowOnlineServices"
                        checked={formData.allowOnlineServices}
                        onChange={(e) =>
                          setFormData((prev) => ({
                            ...prev,
                            allowOnlineServices: e.target.checked,
                          }))
                        }
                        className="h-4 w-4"
                      />
                      <span className="text-sm">Enabled</span>
                    </label>
                  </div>
                </div>

                {/* Appointments */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Requires Appointment
                    </label>
                    <label className="inline-flex items-center gap-2">
                      <input
                        type="checkbox"
                        name="requiresAppointment"
                        checked={formData.requiresAppointment}
                        onChange={(e) =>
                          setFormData((prev) => ({
                            ...prev,
                            requiresAppointment: e.target.checked,
                            maxAppointmentsPerDay: e.target.checked
                              ? prev.maxAppointmentsPerDay || 1
                              : undefined,
                          }))
                        }
                        className="h-4 w-4"
                      />
                      <span className="text-sm">Yes</span>
                    </label>
                  </div>
                  {formData.requiresAppointment && (
                    <div>
                      <label className="block text-sm font-medium text-foreground mb-2">
                        Max Appointments Per Day *
                      </label>
                      <input
                        type="number"
                        min={1}
                        value={formData.maxAppointmentsPerDay || ""}
                        onChange={(e) =>
                          setFormData((prev) => ({
                            ...prev,
                            maxAppointmentsPerDay:
                              e.target.value === "" ? undefined : Number(e.target.value),
                          }))
                        }
                        className={`w-full px-4 py-2.5 bg-card/60 dark:bg-card/40 backdrop-blur-sm border rounded-xl ${
                          errors["maxAppointmentsPerDay"]
                            ? "border-red-500"
                            : "border-border/50"
                        }`}
                      />
                      {errors["maxAppointmentsPerDay"] && (
                        <p className="text-red-500 text-sm mt-1">
                          {errors["maxAppointmentsPerDay"]}
                        </p>
                      )}
                    </div>
                  )}
                </div>

                {/* Working Hours */}
                <div className="space-y-3">
                  <h4 className="text-md font-semibold flex items-center gap-2">
                    <Clock className="w-4 h-4 text-purple-600" />
                    Working Hours
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {(
                      Object.keys(formData.workingHours) as (keyof WorkingHours)[]
                    ).map((day) => {
                      const sched = formData.workingHours[day];
                      return (
                        <div
                          key={day}
                          className={`p-4 rounded-xl border ${
                            errors[`workingHours.${day}`]
                              ? "border-red-500"
                              : "border-border/50"
                          } bg-card/40`}
                        >
                          <div className="flex items-center justify-between">
                            <span className="capitalize font-medium">{day}</span>
                            <label className="inline-flex items-center gap-2">
                              <input
                                type="checkbox"
                                checked={sched.isWorkingDay}
                                onChange={(e) =>
                                  updateWorkingDay(day, "isWorkingDay", e.target.checked)
                                }
                                className="h-4 w-4"
                              />
                              <span className="text-sm">Working Day</span>
                            </label>
                          </div>
                          <div className="grid grid-cols-2 gap-3 mt-3">
                            <div>
                              <label className="block text-xs text-muted-foreground mb-1">
                                Open
                              </label>
                              <input
                                type="time"
                                value={sched.open}
                                disabled={!sched.isWorkingDay}
                                onChange={(e) => updateWorkingDay(day, "open", e.target.value)}
                                className="w-full px-3 py-2 bg-card/60 border border-border/50 rounded-lg disabled:opacity-50"
                              />
                            </div>
                            <div>
                              <label className="block text-xs text-muted-foreground mb-1">
                                Close
                              </label>
                              <input
                                type="time"
                                value={sched.close}
                                disabled={!sched.isWorkingDay}
                                onChange={(e) => updateWorkingDay(day, "close", e.target.value)}
                                className="w-full px-3 py-2 bg-card/60 border border-border/50 rounded-lg disabled:opacity-50"
                              />
                            </div>
                          </div>
                          {errors[`workingHours.${day}`] && (
                            <p className="text-red-500 text-xs mt-2">
                              {errors[`workingHours.${day}`]}
                            </p>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>

              {/* Actions */}
              <div className="flex flex-col sm:flex-row gap-3 pt-6 border-t border-border/30">
                <button
                  type="submit"
                  disabled={isLoading}
                  className="flex-1 flex items-center justify-center gap-2 bg-gradient-to-r from-[#8D153A] to-[#FF5722] text-white px-6 py-3 rounded-xl hover:shadow-lg transition-all duration-300 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
                >
                  {isLoading ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                      {isEditing ? "Updating..." : "Creating..."}
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {isEditing ? "Update Department" : "Create Department"}
                    </>
                  )}
                </button>

                <button
                  type="button"
                  onClick={handleSaveAsDraft}
                  disabled={isLoading}
                  className="flex items-center gap-2 px-6 py-3 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl hover:bg-card/80 hover:border-[#FFC72C]/50 transition-all duration-300 text-foreground disabled:opacity-50"
                >
                  <FileText className="w-4 h-4" />
                  Save as Draft
                </button>

                {isEditing && (
                  <button
                    type="button"
                    onClick={handleCancelEdit}
                    disabled={isLoading}
                    className="flex items-center gap-2 px-6 py-3 bg-card/60 dark:bg-card/40 backdrop-blur-sm border border-border/50 rounded-xl hover:bg-card/80 hover:border-red-500/50 transition-all duration-300 text-foreground disabled:opacity-50"
                  >
                    <X className="w-4 h-4" />
                    Cancel
                  </button>
                )}
              </div>
            </form>
          </motion.div>
        )}
      </div>
    </div>
  );
}

// ---------------------------
// Small Components
// ---------------------------

function ServiceRequirementsEditor({
  service,
  onAdd,
  onRemove,
}: {
  service: IService;
  onAdd: (req: string) => void;
  onRemove: (reqIdx: number) => void;
}) {
  const [value, setValue] = useState("");

  return (
    <div>
      <div className="flex gap-2">
        <input
          type="text"
          value={value}
          onChange={(e) => setValue(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              e.preventDefault();
              if (value.trim()) {
                onAdd(value.trim());
                setValue("");
              }
            }
          }}
          placeholder="Add a requirement and press Enter"
          className="flex-1 px-3 py-2 bg-card/60 border border-border/50 rounded-lg"
        />
        <button
          type="button"
          onClick={() => {
            if (value.trim()) {
              onAdd(value.trim());
              setValue("");
            }
          }}
          className="px-3 py-2 bg-green-600/10 text-green-700 dark:text-green-300 border border-green-600/20 rounded-lg hover:bg-green-600/20 transition"
        >
          <Plus className="w-4 h-4" />
        </button>
      </div>
      {service.requirements?.length > 0 && (
        <div className="flex flex-wrap gap-2 mt-2">
          {service.requirements.map((r, i) => (
            <span
              key={i}
              className="inline-flex items-center gap-1 px-3 py-1 bg-gradient-to-r from-green-500/10 to-green-600/5 border border-green-500/20 rounded-full text-sm text-green-700 dark:text-green-300"
            >
              {r}
              <button
                type="button"
                onClick={() => onRemove(i)}
                className="p-0.5 hover:bg-green-500/20 rounded-full transition-colors duration-200"
                title="Remove requirement"
              >
                <X className="w-3 h-3" />
              </button>
            </span>
          ))}
        </div>
      )}
    </div>
  );
}